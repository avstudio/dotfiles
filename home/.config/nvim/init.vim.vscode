" auto-install vim-plug
if empty(glob("$HOME/.config/nvim/autoload/plug.vim"))
  call system(expand("mkdir -p $HOME/.config/nvim/{autoload,plugged}"))
  call system(expand("git clone https://github.com/junegunn/vim-plug.git $HOME/.config/nvim/plugged/vim-plug"))
  call system(expand("ln -s ~/.config/nvim/plugged/vim-plug/plug.vim ~/.config/nvim/autoload"))
  "call system(expand("git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf"))

  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.config/nvim/plugged')

Plug 'junegunn/vim-plug'
Plug 'mg979/vim-visual-multi'
Plug 'easymotion/vim-easymotion'
Plug 'terryma/vim-expand-region'
Plug 'cocopon/iceberg.vim'
" Plug 'tpope/vim-commentary'

Plug 'elixir-editors/vim-elixir'
Plug 'tpope/vim-surround'
Plug 'tmhedberg/matchit'
Plug 'vim-scripts/ruby-matchit'
Plug 'cakebaker/scss-syntax.vim'

"" textobjects
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'
Plug 'lucapette/vim-textobj-underscore'
Plug 'kana/vim-textobj-indent'
Plug 'whatyouhide/vim-textobj-erb'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'andyl/vim-textobj-elixir'

call plug#end()

filetype plugin indent on

let mapleader="\<Space>"
set clipboard=unnamed,unnamedplus
let b:did_indent = 1
set nocindent nosmartindent noautoindent
au BufNewFile,BufRead *.leex   setf html

" linewrapping junk
set wrap
set linebreak
set nolist
" keeps vim from inserting newlines in freshly entered text
set textwidth=0
set wrapmargin=0
" key bindings to move along visually displayed lines as with a fancy text
" editor
"nnoremap j gj
"nnoremap k gk
"vnoremap j gj
"vnoremap k gk
"nnoremap <Down> gj
"nnoremap <Up> gk
"vnoremap <Down> gj
"vnoremap <Up> gk
"inoremap <Down> <C-o>gj
"inoremap <Up> <C-o>gk
" end linewrapping junk

"" Clipboard
noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

"" Clean search (highlight)
nnoremap <silent><esc> :nohl \| ccl<return><esc>

"" Jumping
nnoremap Q <nop>
noremap H ^
noremap L $
noremap ; :
nnoremap <Leader>d "_d
vnoremap <Leader>d "_d

" inoremap <c-f> <c-x><c-f>
noremap % v%
" EasyMotion  ---------------------------------------------------------------{{{
let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
" }}}

" Commenting  ------------------------------------------------------------{{{
xmap gc  <Plug>VSCodeCommentary
nmap gc  <Plug>VSCodeCommentary
omap gc  <Plug>VSCodeCommentary
nmap gcc <Plug>VSCodeCommentaryLine
" }}}

if has('macunix')
	" pbcopy for OSX copy/paste
	vmap <C-x> :!pbcopy<CR>
	vmap <C-c> :w !pbcopy<CR><CR>
endif

"" Common in insert mode
"imap jj <ESC>
"imap II I
"imap AA A
"imap OO O

function! g:ToggleComment()
    normal! gv

    let selection = [getpos("'<"), getpos("'>")]
    let endLine = selection[1][1]
    let startLine = selection[0][1]

    call VSCodeNotifyRange("editor.action.commentLine", startLine, endLine, 0)
endfunction
